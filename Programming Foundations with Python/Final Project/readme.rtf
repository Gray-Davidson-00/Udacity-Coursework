{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red234\green234\blue234;}
\margl1440\margr1440\vieww12060\viewh12360\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 README: \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
MODULE AND LIBRARY VERSIONS: \
\
python 2.7.10\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \CocoaLigature0 xlrd-0.9.4\
pandas-0.17.1\CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
CREATING AN EXCEL DOCUMENT:\
\
In Excel 2010 I created a spreadsheet which contains a 6x6 grid of data.  Starting in a1 I named each cell after its coordinates, so cell A1 contained the data \'93a1\'94 and outward so cell B6 contained \'93b6\'94.  I saved this file, and found its file path for use in the next step.  \
\
\
\
READING FROM EXCEL: \
\
Online, while reading through the Python documentation for the proper keywords and then through posts to Stack Overflow using those keywords I was able to discover the following small bit of code (lightly edited) for importing data from excel files.  The original post can be seen here: http://stackoverflow.com/a/17291339.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 ________________________________________\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 import pandas as pd\
xl = pd.ExcelFile("\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 path + filename\cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 ")\
contents = xl.parse("Sheet1\'94, header=None) \
\
print(contents)\
________________________________________\
\
To make this code function it will be necessary to install a couple of Python modules.  The first is pandas, a data analysis module.  It can be installed by running \'93sudo \CocoaLigature0 pip install pandas\'94 in the terminal.  This will install pandas\CocoaLigature1  which will in turn install numpy and \CocoaLigature0 python-dateutil\CocoaLigature1 .  The second required module is xlrd, a module for importing from excel.  To install it, run the code \'93\CocoaLigature0 sudo pip install xlrd\'94 from the terminal.  \
	With these two modules installed, and with an accurate path+filename substituted in, the above code should return the following data grid: \
\
   a1  b1  c1  d1  e1  f1 \
0  a2  b2  c2  d2  e2  f2 \
1  a3  b3  c3  d3  e3  f3 \
2  a4  b4  c4  d4  e4  f4 \
3  a5  b5  c5  d5  e5  f5 \
4  a6  b6  c6  d6  e6  f6 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 ________________________________________\CocoaLigature0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 MAKING THE DATA MORE USABLE:\
\
This grid is a pandas construct called a dataframe.  Documentation for the dataframe can be found here: {\field{\*\fldinst{HYPERLINK "http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html"}}{\fldrslt http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html}}.  I want the data in a matrix, so I will convert using \
\
matrix = contents.as_matrix(columns=None)\
\
after which print(matrix) will return: \
\
[[u'a1' u'b1' u'c1' u'd1' u'e1' u'f1']\
 [u'a2' u'b2' u'c2' u'd2' u'e2' u'f2']\
 [u'a3' u'b3' u'c3' u'd3' u'e3' u'f3']\
 [u'a4' u'b4' u'c4' u'd4' u'e4' u'f4']\
 [u'a5' u'b5' u'c5' u'd5' u'e5' u'f5']\
 [u'a6' u'b6' u'c6' u'd6' u'e6' u'f6']]\
\
and print(matrix[3,4]) will return \
\
e4\
\
Note also that the upper-left matrix element is called \'930,0\'94 and further that these two numbers refer to row and then column, so print(matrix[3,4]) will return the contents of the fourth row, fifth column of the matrix which is equivalent to cell E4 in the original excel spreadsheet.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 ________________________________________\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature0 CREATING CLASSES OF BUILDINGS: \
\
In a separate document build.py, I created class Building which contained a series of attributes (name, number_of_floors, length, width, gps_lat, gps_long, year_built, architectural_style, google_maps ) and two child classes inheriting from it with different attributes specific to residential (number_of_residents, average_apt_price, number_of_apartments) or commercial (number_of_businesses, type_of_businesses) buildings.  \
\
When calling an instance of class Residential, it is possible to name the building\'92s attributes (architectural style for instance) utilizing matrix[x,y], which will assign the value in (y+1, x+1) of the spreadsheet to that attribute.\
\
I built a new spreadsheet with six fictional buildings, calling it Building_Data.xlsx.  Using this spreadsheet, calling instance chrysler_tower = build.Commercial\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 ________________________________________\
PREPARING TO DRAW BUILDINGS: \
\
Buildings will be drawn with turtle graphics, and will each be represented as rectangular prisms of dimensions (length/12, width/12, number_of_floors*3) (the coefficients will simply make the image come out looking like a city and do not correspond to real values).  \
\
In order to set a turtle\'92s starting position without drawing a line from (0,0)(or from the last known position whatever it might be) to that position, the following code may be used: \
\
turtle.penup()\
turtle.goto(x,y)\
turtle.pendown() \
\
To set a turtle\'92s pen color and fill color using an mixed string and rub colorspace, the following code may be used: \
\
the_pen.color("black", self.color) #line color and fill color respectively.\
the_pen.fill(True)        \
\CocoaLigature0 \
self.color is defined as an attribute of the child classes and is calculated based on the building\'92s age and type.  \
\
One of the only complexities here is the difference between these: \
\
age_coeficient = year_built-1900/100\
age_coeficient = float(year_built)-1900/100\
\
year_built is automatically imported as an integer which means that age_coeficient will always round to 0.  converting year_built to a floating point number will force age_coefficient to also be a float and will therefore allow decimal values.  \
\CocoaLigature1 ________________________________________\CocoaLigature0 \
DRAWING BUILDINGS:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 To set a turtle\'92s heading, we can use: \
\
turtle.seth(d)\
\
Where d is specified in degrees counter-clockwise from the positive x-axis.  \
\
Finally, by using turtle.forward(n) and turtle.backward(n) with the pen down, we can draw the lines which will make up our buildings.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \CocoaLigature1 ________________________________________\CocoaLigature0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 SUMMARY:\
\
With all six (or more) buildings\'92 data filled in in the appropriate cells of Building_Data.xlsx, the python code utilizes this data to create a colored plot of the buildings in three dimensions.  The buildings are colored according to their function, sized according to their dimensions and tinted according to their age.  \
\
\
\
\
\
\
\
\
\
\
\
}